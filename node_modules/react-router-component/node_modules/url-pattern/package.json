{
  "name": "url-pattern",
  "version": "0.6.0",
  "description": "url-pattern is easy pattern matching and segment extraction for urls, domains, filepaths and any string composed of segments joined by a separator character",
  "keywords": [
    "url",
    "pattern",
    "matching",
    "routing",
    "route",
    "regex",
    "match",
    "segment",
    "path",
    "domain",
    "separator"
  ],
  "homepage": "http://github.com/snd/url-pattern",
  "author": {
    "name": "Maximilian KrÃ¼ger",
    "email": "kruemaxi@gmail.com",
    "url": "http://github.com/snd"
  },
  "contributors": [
    {
      "name": "Andrey Popp",
      "email": "8mayday@gmail.com",
      "url": "https://github.com/andreypopp"
    },
    {
      "name": "Samuel Reed",
      "url": "https://github.com/STRML"
    }
  ],
  "bugs": {
    "url": "http://github.com/snd/url-pattern/issues",
    "email": "kruemaxi@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/snd/url-pattern.git"
  },
  "licenses": {
    "type": "MIT",
    "url": "git://github.com/snd/url-pattern/LICENSE"
  },
  "engines": {
    "node": ">=0.8.5"
  },
  "dependencies": {},
  "devDependencies": {
    "nodeunit": "0.8.6",
    "coffee-script": "1.7.1"
  },
  "main": "src/url-pattern",
  "scripts": {
    "prepublish": "coffee --bare --compile --output src src/*.coffee",
    "pretest": "coffee --bare --compile --output src src/*.coffee && coffee --bare --compile --output test test/*.coffee",
    "test": "node_modules/nodeunit/bin/nodeunit test/*.js"
  },
  "readme": "# url-pattern\n\n[![Build Status](https://travis-ci.org/snd/url-pattern.png)](https://travis-ci.org/snd/url-pattern)\n\nurl-pattern is easy pattern matching and segment extraction for\nurls, domains, filepaths and any string composed of segments joined\nby a separator character\n\n[check out **passage** if you are looking for simple composable routing that builds on top of url-pattern](https://github.com/snd/passage)\n\n- [install](#install)\n- [require](#require)\n- [match urls or filepaths](#match-urls-or-filepaths)\n- [match domains](#match-domains)\n- [license](#license-mit)\n\n### install\n\n```\nnpm install url-pattern\n```\n\n**or**\n\nput this line in the dependencies section of your `package.json`:\n\n```\n\"url-pattern\": \"0.6.0\"\n```\n\nthen run:\n\n```\nnpm install\n```\n\n### require\n\n```javascript\nvar urlPattern = require('url-pattern');\n```\n\n### match urls or filepaths\n\n##### make pattern from string\n\n```javascript\nvar pattern = urlPattern.newPattern('/users/:id');\n```\n\nthe default separator is `/`. you can pass a custom separator\nas the second argument to `newPattern`.\n\n##### match pattern against url\n\nmatch returns the extracted parameters or `null` if there was no match:\n\n```javascript\npattern.match('/users/5'); // => {id: '5'}\npattern.match('/projects/5'); // => null\n```\n\n##### make pattern from regex\n\n```javascript\nvar regexPattern = urlPattern.newPattern(/\\/test\\/(.*)/);\n```\n\n##### match regex pattern against url\n\nif the pattern was created from a regex an array of the captured groups is returned on match:\n\n```javascript\nregexPattern.match('/test/users'); // => ['users']\nregexPattern.match('/users/test'); // => null\n```\n\n##### make wildcard pattern from string\n\n```javascript\nvar wildcardPattern = urlPattern.newPattern('*/users/:id/*');\n```\n\n##### match wildcard pattern against url\n\nwildcard matches are collected in the `_` property:\n\n```javascript\nwildcardPattern.match('/api/v1/users/10/followers/20');\n// => {id: '10', _: ['/api/v1', 'followers/20']}\n```\n\n##### make optional pattern from string\n\n```javascript\nvar optionalPattern = urlPattern.newPattern('(/)users(/:foo)/bar(/*)');\n```\n\n##### match optional pattern against url\n\noptional matches are stored in the corresponding property, if they exist.\n\n```javascript\noptionalPattern.match('users/bar');\n// => {}\noptionalPattern.match('/users/bar');\n// => {}\noptionalPattern.match('/users/biff/bar');\n// => {foo: 'biff'}\noptionalPattern.match('/users/biff/bar/beep/boop');\n// => {foo: 'biff', _: ['beep/boop']}\n```\n\n### match domains\n\n##### make pattern from string\n\n```javascript\nvar pattern = urlPattern.newPattern(':sub.google.com', '.');\n```\n\nthe default separator is `/`. you can pass a custom separator\nas the second argument to `newPattern`.\n\n##### match pattern against domain\n\nmatch returns the extracted parameters or `null` if there was no match:\n\n```javascript\npattern.match('www.google.com'); // => {sub: 'www'}\npattern.match('www.google.io'); // => null\n```\n\n##### make pattern from regex\n\n```javascript\nvar regexPattern = urlPattern.newPattern(/example\\.(.*)/);\n```\n\n##### match regex pattern against domain\n\nif the pattern was created from a regex an array of the captured groups is returned on match:\n\n```javascript\nregexPattern.match('example.com'); // => ['com']\nregexPattern.match('google.com'); // => null\n```\n\n##### make wildcard pattern from string\n\n```javascript\nvar wildcardPattern = urlPattern.newPattern('*.:sub.google.*');\n```\n\n##### match wildcard pattern against url\n\nwildcard matches are collected in the `_` property:\n\n```javascript\nwildcardPattern.match('subsub.www.google.com');\n// => {sub: 'www', _: ['subsub', 'com']}\n```\n\n### license: MIT\n",
  "readmeFilename": "README.md",
  "_id": "url-pattern@0.6.0",
  "dist": {
    "shasum": "2c74947f12f25e61d0381836c113bda5917d31ba"
  },
  "_from": "url-pattern@~0.6.0",
  "_resolved": "https://registry.npmjs.org/url-pattern/-/url-pattern-0.6.0.tgz"
}
